(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{380:function(s,t,a){"use strict";a.r(t);var o=a(44),e=Object(o.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" Symbol")]),s._v(" "),a("p",[s._v("Symbol(符号)是 ES6 新增的数据类型，是原始值之一，用于确保对象属性使用唯一标识符，避免属性冲突。对象的 key 除了字符串只能是 Symbol 实例。")]),s._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("实例通过 "),a("code",[s._v("Symbol()")]),s._v(" 进行初始化，不支持使用 new 关键字初始化（以避免创建 Symbol 包装类型）。可以传入字符串参数用作描述信息，这个字符串仅用于是、在 DevTools 调试，与 Symbol 的标识"),a("strong",[s._v("无关")]),s._v("。")]),s._v(" "),a("div",{staticClass:"code-block inside-gutter"},[s._v('const s1 = Symbol();\nconst s2 = Symbol();\nconsole.log(s1 === s2);\nconst namedS1 = Symbol("foo");\nconst namedS2 = Symbol("foo");\nconsole.log(namedS1 === namedS2);\n')]),a("p",[s._v("所以在 DevTools 里以 Symbol 实例作为属性名，也许会看着一样，但是不会冲突。对其属性的操作在代码中有对应的局部变量。")]),s._v(" "),a("div",{staticClass:"code-block inside-gutter"},[s._v('const key1 = Symbol("foo");\nconst key2 = Symbol("foo");\nconst obj = {\n  [key1]: "value1",\n  [key2]: "value2",\n};\nconsole.log(obj);\n')]),a("h2",{attrs:{id:"全局-symbol-注册表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局-symbol-注册表"}},[s._v("#")]),s._v(" 全局 Symbol 注册表")]),s._v(" "),a("p",[s._v("需要跨文件跨作用域使用某一 Symbol，可以通过字符串 key 索引到对应的 Symbol 对象复用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.key")]),s._v(" 调用时会先检测全局注册表，发现不存在对应的 Symbol 实例，就生成一个新的 Symbol 实例并添加到全局注册表中，后续使用时直接返回这个 Symbol 实例。")]),s._v(" "),a("div",{staticClass:"code-block inside-gutter"},[s._v('const s1 = Symbol.for("foo");\nconst s2 = Symbol.for("foo");\nconsole.log(s1 === s2);\n')]),a("p",[a("code",[s._v("Symbol.keyFor")]),s._v(" 通过 Symbol 实例反查全局注册表中的 key,如果传入的参数不是注册表中全局 Symbol 实例，返回 undefined.传入非 Symbol 实例抛出 TypeError.")]),s._v(" "),a("div",{staticClass:"code-block inside-gutter"},[s._v('const s = Symbol.for("foo");\nconsole.log(Symbol.keyFor(s));\n')]),a("h2",{attrs:{id:"well-known-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#well-known-symbols"}},[s._v("#")]),s._v(" Well-Known Symbols")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://tc39.es/ecma262/#sec-well-known-symbols",target:"_blank",rel:"noopener noreferrer"}},[s._v("Well-Known Symbols"),a("OutboundLink")],1),s._v(" 就是在 Devtools 中看到的原型链上 "),a("code",[s._v("Symbol(Symbol.xxx)")]),s._v(" 属性，用于暴露语言的内部行为。")]),s._v(" "),a("h3",{attrs:{id:"symbol-iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-iterator"}},[s._v("#")]),s._v(" Symbol.iterator")]),s._v(" "),a("blockquote",[a("p",[s._v("A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.")])]),s._v(" "),a("p",[s._v("为对象返回默认迭代器的一个方法。for-of 循环调用这个函数进行迭代操作。")]),s._v(" "),a("h3",{attrs:{id:"symbol-asynciterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-asynciterator"}},[s._v("#")]),s._v(" Symbol.asyncIterator")]),s._v(" "),a("h3",{attrs:{id:"symbol-hasinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-hasinstance"}},[s._v("#")]),s._v(" Symbol.hasInstance")]),s._v(" "),a("h3",{attrs:{id:"symbol-isconcatspreadable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-isconcatspreadable"}},[s._v("#")]),s._v(" Symbol.isConcatSpreadable")]),s._v(" "),a("h3",{attrs:{id:"symbol-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-match"}},[s._v("#")]),s._v(" Symbol.match")]),s._v(" "),a("h3",{attrs:{id:"symbol-matchall"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-matchall"}},[s._v("#")]),s._v(" Symbol.matchAll")]),s._v(" "),a("h3",{attrs:{id:"symbol-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-replace"}},[s._v("#")]),s._v(" Symbol.replace")]),s._v(" "),a("h3",{attrs:{id:"symbol-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-search"}},[s._v("#")]),s._v(" Symbol.search")]),s._v(" "),a("h3",{attrs:{id:"symbol-species"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-species"}},[s._v("#")]),s._v(" Symbol.species")]),s._v(" "),a("h3",{attrs:{id:"symbol-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-split"}},[s._v("#")]),s._v(" Symbol.split")]),s._v(" "),a("h3",{attrs:{id:"symbol-toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[s._v("#")]),s._v(" Symbol.toPrimitive")]),s._v(" "),a("h3",{attrs:{id:"symbol-tostringtag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-tostringtag"}},[s._v("#")]),s._v(" Symbol.toStringTag")]),s._v(" "),a("h3",{attrs:{id:"symbol-unscopables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-unscopables"}},[s._v("#")]),s._v(" Symbol.unscopables")])])}),[],!1,null,null,null);t.default=e.exports}}]);